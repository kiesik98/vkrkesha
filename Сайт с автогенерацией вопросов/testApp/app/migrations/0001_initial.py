# Generated by Django 3.0.4 on 2020-03-15 13:17

import app.helpers
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('middle_name', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('text', models.CharField(max_length=1000, verbose_name='Текст ответа')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images', verbose_name='Изображение для ответа')),
                ('right', models.BooleanField(default=False, verbose_name='Верный ли вариант ответа')),
            ],
            options={
                'verbose_name': 'Вариант ответа',
                'verbose_name_plural': 'Варианты ответа',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=30, verbose_name='Номер группы')),
            ],
            options={
                'verbose_name': 'Группа',
                'verbose_name_plural': 'Группы',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('points', models.PositiveSmallIntegerField(default=0, verbose_name='Количество баллов за вопрос')),
                ('number', models.PositiveSmallIntegerField(default=1, help_text='Номер вопроса в рамках теста должен быть уникален', verbose_name='Номер вопроса в тесте')),
            ],
            options={
                'verbose_name': 'Вопрос в тесте',
                'verbose_name_plural': 'Вопросы в тесте',
            },
        ),
        migrations.CreateModel(
            name='StudentTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('points', models.PositiveSmallIntegerField(default=0, verbose_name='Количество набранных баллов за тест')),
                ('token', models.CharField(default=app.helpers.random_chars, editable=False, max_length=20, unique=True)),
                ('checked', models.BooleanField(default=False, verbose_name='Проверен ли тест')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests', to='app.Group', verbose_name='Группа')),
                ('student', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
            options={
                'verbose_name': 'Тест студента',
                'verbose_name_plural': 'Тесты студентов',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Название темы')),
            ],
            options={
                'verbose_name': 'Тема для вопроса',
                'verbose_name_plural': 'Темы для вопросов',
            },
        ),
        migrations.CreateModel(
            name='TopicQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(max_length=1000, verbose_name='Текст вопроса')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images', verbose_name='Изображение для вопроса')),
                ('answer_type', models.CharField(choices=[('SINGLE', 'Одиночный ответ'), ('MULTIPLE', 'Несколько вариантов'), ('FREE', 'В свободной форме')], help_text='Используйте соответствующее количество правильных вариантов ответов, для вопроса в свободной форме ответ не требуется', max_length=10, verbose_name='Тип ответа на вопрос')),
                ('topic', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='app.Topic', verbose_name='Тема')),
            ],
            options={
                'verbose_name': 'Вопрос из темы',
                'verbose_name_plural': 'Вопросы из темы',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Название теста')),
                ('duration', models.PositiveSmallIntegerField(verbose_name='Продолжительность теста в минутах')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tests', to=settings.AUTH_USER_MODEL, verbose_name='Составил')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
            },
        ),
        migrations.CreateModel(
            name='StudentTestQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('points', models.SmallIntegerField(default=0, verbose_name='Количество баллов за ответы на вопрос')),
                ('question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='test_questions', to='app.TopicQuestion', verbose_name='Конкретный вопрос для студента')),
                ('test', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='questions', to='app.StudentTest', verbose_name='Тест')),
                ('test_question', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_test_questions', to='app.Question', verbose_name='Вопрос из теста преподавателя')),
            ],
            options={
                'verbose_name': 'Вопрос в тесте для студента',
                'verbose_name_plural': 'Вопросы в тесте для студента',
                'unique_together': {('test', 'test_question')},
            },
        ),
        migrations.AddField(
            model_name='studenttest',
            name='test',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='student_tests', to='app.Test', verbose_name='Тест'),
        ),
        migrations.CreateModel(
            name='StudentAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('modified_time', models.DateTimeField(auto_now=True)),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текст для случая со свободной формой ответа')),
                ('answers', models.ManyToManyField(related_name='student_answers', to='app.Answer', verbose_name='Ответ')),
                ('question', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='answer', to='app.StudentTestQuestion', verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'Ответ студента',
                'verbose_name_plural': 'Ответы студента',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='app.Test', verbose_name='Тест'),
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_questions', to='app.Topic', verbose_name='Тема'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='app.TopicQuestion', verbose_name='Вопрос'),
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='app.Group', verbose_name='Группа'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='question',
            unique_together={('test', 'number')},
        ),
    ]
